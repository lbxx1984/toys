export default {"Bind.vue":"<template>\r\n    <div class=\"container\">\r\n        <h2>v-bind</h2>\r\n        <hr/>\r\n        <p>\r\n            {{message}}<br/>\r\n            <input :value=\"message\" @input=\"onMessageInput\"/><br/>\r\n            <input v-model=\"message\"/><br/>\r\n        </p>\r\n        <p v-bind:title=\"title\">Bind data on dom property.(mouse hover here)</p>\r\n        <p v-bind=\"{class: borderClass, style: inlineCssText}\">Bind an object on dom properties.</p>\r\n        <p :class=\"borderClass\">Bind data on class.</p>\r\n        <p :class=\"{'text-border': hasBorder, 'text-content': hasContent}\">Bind an object on class</p>\r\n        <p :class=\"[borderClass, contentClass]\">Bind an array on class</p>\r\n        <p :style=\"inlineCssText\">Bind data on inline style.</p>\r\n        <p :style=\"inlineCssObject\">Bind an object on inline style.</p>\r\n        <p :style=\"[inlineCssObject, inlineCssObject1]\">Bind an array on inline style.</p>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        data() {\r\n            return {\r\n                message: 'Bind data on input box.',\r\n                title: 'This message will be seen only when you hover the dom.',\r\n                borderClass: 'text-border',\r\n                contentClass: 'text-content',\r\n                inlineCssText: 'color:red;',\r\n                inlineCssObject: {\r\n                    fontSize: '14px',\r\n                    padding: '10px',\r\n                    backgroundColor: 'rgba(125,52,200,0.5)'\r\n                },\r\n                inlineCssObject1: {\r\n                    fontWeight: 700\r\n                },\r\n                hasBorder: true,\r\n                hasContent: false\r\n            }\r\n        },\r\n        methods: {\r\n            onMessageInput(e) {\r\n                this.message = e.target.value;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\">\r\n    .container {\r\n        padding: 20px;\r\n        .text-border {\r\n            background-color: rgba(54, 67, 111, 0.5)\r\n        }\r\n        .text-content {\r\n            font-size: 24px;\r\n        }\r\n    }\r\n</style>\r\n","Computed.vue":"<template>\n    <div class=\"container\">\n        <h2>computed</h2>\n        <hr/>\n        <div>{{message}}</div>\n        <div>{{reversedMessage}}</div>\n        <div>{{arr}}</div>\n        <div>{{computedArr}}</div>\n        <div>{{computedArr2BaseOnArr}}</div>\n        <button @click=\"changeMessage\">random</button>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                message: '11542158454136854638979',\n                arr: []\n            }\n        },\n        computed: {\n            reversedMessage() {\n                return 'Computed data：' + this.message.split('').reverse().join('');\n            },\n            computedArr: {\n                set(value) {\n                    this.arr = value.split('');\n                    // computed循环set会导致浏览器崩溃\n                    // this.computedArr2BaseOnArr = value;\n                },\n                get() {\n                    return this.arr.join('');\n                }\n            },\n            computedArr2BaseOnArr: {\n                set(value) {\n                    this.computedArr = value + value;\n                },\n                get() {\n                    return this.computedArr.split('').join('-');\n                }\n            }\n        },\n        methods: {\n            changeMessage() {\n                let value = parseInt(Math.random() * 1000000000000000000, 10) + '';\n                this.message = value;\n                this.computedArr2BaseOnArr = value;\n            }\n        }\n    }\n</script>\n\n<style lang=\"less\">\n\n</style>\n","Event.vue":"<template>\n    <div class=\"container\">\n        <h2>Event</h2>\n        <hr/>\n        <h6>count: {{count}}</h6>\n        <button v-on:click=\"count++\">Inline JavaScript</button><br/>\n        <button @click=\"add\">Event Handler</button><br/>\n        <button @click=\"add(5, $event)\">\n            Inline Event Handler<br/>\n            this button will pass a custom param to event handler.\n        </button><br/>\n        <button @click.ctrl=\"add(100)\">\n            Modifer Key<br/>\n            this button works only when you click it while 'ctrl' pressing down.\n        </button><br/>\n        <button @click.once=\"add(10)\">\n            Event Modifier<br/>\n            this button works <b style=\"color:red;\">only once</b>.\n        </button>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                count: 0\n            }\n        },\n        methods: {\n            add(n) {\n                this.count += isNaN(n) ? 1 : n;\n            }\n        }\n    }\n</script>\n\n<style lang=\"less\">\n\n</style>\n","For.vue":"<template>\r\n    <div class=\"container\">\r\n        <h2>v-for</h2>\r\n        <hr/>\r\n        <button @click=\"pushArr1\">push</button>\r\n        <button @click=\"popArr1\">pop</button>\r\n        <ul>\r\n            <li v-for=\"(item, index) in arr1\" :style=\"{color: index % 2 === 0 ? 'green' : 'red'}\">{{item}}</li>\r\n        </ul>\r\n        <ul>\r\n            <li v-for=\"(item, index) in arr1\">{{index + 1 + '-' + item}}</li>\r\n        </ul>\r\n        <button @click=\"addObj1\">add</button>\r\n        <button @click=\"deleteObj1\">delete</button>\r\n        <ul>\r\n            <li v-for=\"(value, key) in obj1\">{{key + ' : ' + value}}</li>\r\n        </ul>\r\n        <button @click=\"addLeaf1\">add</button>\r\n        <button @click=\"deleteLeaf1\">delete</button>\r\n        <ul>\r\n            <li v-for=\"(children, index) in tree1\">\r\n                <h6>{{index}}</h6>\r\n                <ul>\r\n                    <li v-for=\"value in children\">\r\n                        <h6>{{value}}</h6>\r\n                    </li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        data() {\r\n            return {\r\n                arr1: [\r\n                    'line1', 'line2', 'line3', 'line4', 'line5'\r\n                ],\r\n                obj1: {\r\n                    key1: 'value1',\r\n                    key2: 'value2',\r\n                    key3: 'value3',\r\n                    key4: 'value4',\r\n                    key5: 'value5',\r\n                    key6: 'value6'\r\n                },\r\n                tree1: {\r\n                    leaf1: {\r\n                        leaf11: 'leaf11',\r\n                        leaf12: 'leaf12',\r\n                        leaf13: 'leaf13'\r\n                    },\r\n                    leaf2: {\r\n                        leaf21: 'leaf21',\r\n                        leaf22: 'leaf22',\r\n                        leaf23: 'leaf23'\r\n                    },\r\n                    leaf3: {\r\n                        leaf31: 'leaf31',\r\n                        leaf32: 'leaf32',\r\n                        leaf33: 'leaf33'\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            pushArr1() {\r\n                this.arr1.push('line' + (this.arr1.length + 1));\r\n            },\r\n            popArr1() {\r\n                this.arr1.pop();\r\n            },\r\n            addObj1() {\r\n                let keys = Object.keys(this.obj1);\r\n                this.$set(this.obj1, 'key' + (keys.length + 1), 'value' + (keys.length + 1));\r\n            },\r\n            deleteObj1() {\r\n                let keys = Object.keys(this.obj1);\r\n                if (!keys.length) {\r\n                    return;\r\n                }\r\n                this.$delete(this.obj1, 'key' + keys.length);\r\n            },\r\n            addLeaf1() {\r\n                let keys = Object.keys(this.tree1.leaf1);\r\n                this.$set(this.tree1.leaf1, 'leaf1' + (keys.length + 1), 'leaf1' + (keys.length + 1));\r\n            },\r\n            deleteLeaf1() {\r\n                let keys = Object.keys(this.tree1.leaf1);\r\n                if (!keys.length) {\r\n                    return;\r\n                }\r\n                this.$delete(this.tree1.leaf1, 'leaf1' + keys.length);\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\">\r\n\r\n</style>\r\n","If.vue":"<template>\n    <div class=\"container\">\n        <h2>v-if</h2>\n        <hr/>\n        <h5 v-if=\"num > 0.6\">{{num}} > 0.6</h5>\n        <h5 v-else-if=\"num > 0.3\">0.6 => {{num}} > 0.3</h5>\n        <h5 v-else>0.3 => {{num}}</h5>\n        <button @click=\"random\">random</button>\n        <h5>with out v-if</h5>\n        <ul>\n            <li v-for=\"(item, index) in arr\">{{index + ': ' + item}}</li>\n        </ul>\n        <h5>v-if=\"(index + 1) % 3 !== 0\"</h5>\n        <ul>\n            <li v-for=\"(item, index) in arr\" v-if=\"(index + 1) % 3 !== 0\">{{index}}</li>\n        </ul>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                num: Math.random().toFixed(1),\n                arr: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n            }\n        },\n        methods: {\n            random() {\n                this.num = Math.random().toFixed(1);\n            }\n        }\n    }\n</script>\n\n<style lang=\"less\">\n\n</style>\n","LifeCycle.vue":"<template>\n    <div class=\"container\">\n        <h2>Life Cycle</h2>\n        <hr/>\n        <div v-for=\"line in msg\">{{line}}</div>\n        <button @click=\"addCount\">{{'count: ' + count}}</button>\n        <h6>See more life cycle callback actions in console.</h6>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                msg: [],\n                count: 0\n            }\n        },\n        methods: {\n            addCount() {\n                this.count++;\n            }\n        },\n        beforeCreate() {\n            console.log('beforeCreate: ' + new Date().getTime());\n        },\n        created() {\n            this.msg.push('created: ' + new Date().getTime());\n        },\n        beforeMount() {\n            this.msg.push('beforeMount: ' + new Date().getTime());\n        },\n        mounted() {\n            this.msg.push('mounted: ' + new Date().getTime());\n        },\n        beforeUpdate() {\n            console.log('beforeUpdate: ' + new Date().getTime());\n        },\n        updated() {\n            console.log('updated: ' + new Date().getTime());\n        },\n        beforeDestroy() {\n            console.log('beforeDestroy: ' + new Date().getTime());\n        },\n        destroyed() {\n            console.log('destroyed: ' + new Date().getTime());\n        }\n    }\n</script>\n\n<style lang=\"less\">\n\n</style>\n","Test.vue":"<template>\n    <div class=\"container\">\n        <h2>For-If</h2>\n        bind\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                msg: 'Test'\n            }\n        }\n    }\n</script>\n\n<style lang=\"less\">\n\n</style>\n"};